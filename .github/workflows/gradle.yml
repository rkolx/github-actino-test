# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

      # 도커 빌드(도커 이미지 생성)
    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0 .
        docker push ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0
        docker rmi ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0

      # 도커 이미지 배포 및 실행(EC2 ubuntu20.04로 배포)
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST_DNS }} #(생성한 인스턴스의 DNS주소)
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }} #(인스턴스를 생성할 때 다운받은 pem키안에 값을 모두 복사해서 붙여넣기)
        envs: GITHUB_SHA
        script: |
          sudo docker ps -a -q --filter "name=jpa-shop-test" | grep -q . && docker stop jpa-shop-test && docker rm jpa-shop-test | true
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0
          sudo docker run -d -p 80:8080 --name jpa-shop-test ${{ secrets.DOCKER_USERNAME }}/jpa-shop-test:1.0
          sudo docker rmi -f $(docker images -f "dangling=true" -q) || true
